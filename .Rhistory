graph_bar3$pilar_name_f<- factor(graph_bar3$pilar_name, levels= c("Resilience", "Inclusion", "Sustainability", "Efficiency"))
graph3  <-  ggplot(graph_bar3, aes(x = r, y = percentil_median*100, fill = pilar_name_f, color = as.factor(iso3))) +
geom_col(size=1.2, alpha=0.7)+
geom_hline(data=country_comparators, aes(yintercept = percentil*100, linetype= as.factor(iso3)), size=1.5)+
facet_grid(~pilar_name_f, scales = "free")+
#scale_y_continuous(labels = value, breks= value)+
labs(y = "Median percentil rank",
title = "")+
theme_minimal()+
theme(strip.text.x = element_text(size = 19, face = "bold"),
axis.text.y = element_text(size = 16, hjust = .5, vjust = .5),
plot.title=element_text(size=14, face = "bold"),
axis.title.x=element_blank(),
axis.text.x = element_text(size= 14),
legend.position = "none",
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())+
scale_fill_manual(values = c("darkcyan", "red2" ,"darkorange", "darkmagenta"))+
scale_color_manual(values=c("grey25", "green3"
# , "grey17", "hotpink1", "blue"
))+
scale_linetype_manual(values=c("solid", "twodash", "dotted"))+
scale_x_continuous(breaks = graph_bar3$r, labels = str_wrap(graph_bar3$group, width = 7)) +
geom_text(aes(x=r, y=(percentil_median*100)+3 , label= as.integer(percentil_median*100)), color="black",alpha=1, size=6, inherit.aes = FALSE )
ggsave(graph3, file=paste0(dir_out, group,'/',i,"_barplot_per_comparison_v1_color.png"), width=25, height=10)
#"chocolate1", "hotpink1", "blue"
knitr::opts_knit$set(root.dir = "C:/Users/####/OneDrive/")
library(WDI)
library(dplyr)
library(readxl)
library(xml2)
library(rvest)
library(tidyverse)
library(data.table)
library(ggplot2)
library(grid)
library(lattice)
library(survival)
library(Formula)
library(Hmisc)
#detach(package:plyr)
dir_int<-"./Integrated data/" #Folder with data generated in code Benchmarking_Data_V3
#dir_out<- "./Data/Benchmarking/SD_Profiles/Output/"
dir_out<-"./Output/"
#In your coumputer, this directory create  separate folders for income group - ex: ./My Files/Output/lmic -./My Files/Output/umic, etc, in oder to save countries info per income group
getwd()
#retrive database with all the variables generated in "Benchmarking_V3"
integrated3 <- read.csv(paste0(dir_int, "World_SD_values_V5.csv"))
#####  Resilence   #######
#For Resilience, the same set of indicators are used in the two versions, but for graphing proposes, generate the two variables
#V0
integrated3<-mutate(integrated3, Resilience_v0 = rowMeans(select(integrated3, c("risk_wellbeing_per", "risk_to_assets_per", "food_sec_per", "pop_dis_per", "rain_exp_per", "EN.POP.SLUM.UR.ZS_per")), na.rm = TRUE))
#V1
integrated3<-mutate(integrated3, Resilience_v1 = rowMeans(select(integrated3, c("risk_wellbeing_per", "risk_to_assets_per", "food_sec_per", "pop_dis_per", "rain_exp_per", "EN.POP.SLUM.UR.ZS_per")), na.rm = TRUE))
######  Inclusion   #######
#V0 Indicators not included compared with V1: "sec_aparat" (Security Apparatus)
integrated3<-mutate(integrated3, Inclusion_v0 = rowMeans(select(integrated3, c("pov_1016_per", 'SL.TLF.CACT.FE.ZS_per',"SH.STA.SMSS.ZS_per", "SH.H2O.SMDW.ZS_per", "HD.HCI.OVRL_per", "SI.POV.GINI_per", "SE.SEC.ENRR_per", "SH.IMM.IDPT_per", "account.t.d.7_per", "LGBT_acc_per", "wbl_per", "trust_ppl_per", "ref_idp_per", "conf_gov_per")), na.rm = TRUE))
#V1
integrated3<-mutate(integrated3, Inclusion_v1 = rowMeans(select(integrated3, c("pov_1016_per", 'SL.TLF.CACT.FE.ZS_per',"SH.STA.SMSS.ZS_per", "SH.H2O.SMDW.ZS_per", "HD.HCI.OVRL_per", "SI.POV.GINI_per", "SE.SEC.ENRR_per", "SH.IMM.IDPT_per", "account.t.d.7_per", "LGBT_acc_per", "wbl_per", "trust_ppl_per", "ref_idp_per", "sec_aparat_per", "conf_gov_per")), na.rm = TRUE))
######   Sustainability  ########
#V0 Indicators not included compared with V1: ,"waste_managed_per, BHV_new_per", "FSH_new_per", "GIB_new_per", "EN.ATM.CO2E.PC_per", "waste_rate_per"
#Note, forest loss is excluded when the country has very low levels of forest loss
integrated3<-mutate(integrated3, Sustainability_v0 = rowMeans(select(integrated3, c("NY.ADJ.SVNG.GN.ZS_per", "EN.ATM.PM25.MC.M3_per", "EG.FEC.RNEW.ZS_per", "ER.H2O.INTR.PC_per","wat_qua_per", "WWT.new_per"
,"forest_loss_per"
)), na.rm = TRUE))
# V1 Indicators not included compared with V0: "NY.ADJ.SVNG.GN.ZS_per"
#Note, forest loss is excluded when the country has very low levels of forest loss
integrated3<-mutate(integrated3, Sustainability_v1 = rowMeans(select(integrated3, c("EN.ATM.PM25.MC.M3_per", "EG.FEC.RNEW.ZS_per", "ER.H2O.INTR.PC_per","wat_qua_per", "WWT.new_per", "waste_rate_per", "waste_managed_per", "BHV.new_per", "FSH.new_per", "GIB.new_per", "EN.ATM.CO2E.PC_per"
, "forest_loss_per"
)), na.rm = TRUE))
###### Efficiency ##############
#For Efficiency a different version of water efficiency is used in V0 and in V1
#V0 use water_efficiency_ceo - GNI/(waterwithdral*10*9) (calculated in this code- aqua datafram)
#Other indicators not included: "reg_qua_per"
integrated3<-mutate(integrated3, Efficiency_v0 = rowMeans(select(integrated3, c("agri_value_per", "agri_land_per", "gini_ghg_per", "gov_effect_per", "cont_corr_per", "lpi_score_per", "sdg9_intuse_per", "water_efficiency_ceo_per", "Tenure.insecurity_per")), na.rm = TRUE))
#v1 use water_efficiency_FAO_per, value added per water withdrawn, expressed in USD/m3 from FAO (details also in this code)
#Other indicators not included: "reg_qua_per"
integrated3<-mutate(integrated3, Efficiency_v1 = rowMeans(select(integrated3, c("agri_value_per", "agri_land_per", "gini_ghg_per", "gov_effect_per", "cont_corr_per", "lpi_score_per", "sdg9_intuse_per", "water_efficiency_FAO_per", "Tenure.insecurity_per")), na.rm = TRUE))
#Save all the database with raw values and percentile data (worldwide data)
write.csv(integrated3, paste0(dir_int, "World_SD_values_V5_index.csv"), row.names = FALSE)
# Load country dataset to create list of countries per income group that we will used in the loop
country_estimates_global <- read.csv(paste0(dir_int, "World_SD_values_V5_index.csv"))
# Lower MICS
country_estimates <- country_estimates_global %>% filter(income=='Lower middle income')
lmics <- unique(country_estimates$iso3)
lmics <- as.character(lmics)
# Low income
country_estimates <- country_estimates_global %>% filter(income=='Low income')
lics <- unique(country_estimates$iso3)
lics <- as.character(lics)
# Upper MICS
country_estimates <- country_estimates_global %>% filter(income=='Upper middle income')
umics <- unique(country_estimates$iso3)
umics <- as.character(umics)
# High Income
country_estimates <- country_estimates_global %>% filter(income=='High income')
hics <- unique(country_estimates$iso3)
hics <- as.character(hics)
#Income group (select same category)
#country <- lmics ### HERE CHOOSE INCOME GROUP WE WANT TO COMPARE TO FROM ABOVE VARIABES ###
group <- 'lmics' ### HERE CHOOSE INCOME GROUP WE WANT TO COMPARE TO FROM ABOVE VARIABES ###
country="PSE"  #use one country for tests
#Set files names to read according to comparison groups
comparison_percentile <- paste0('DB_SD_',group,'_score')
comparison_score <- paste0('DB_SD_',group,'_score')
### Version indicator
#choose 0 or 1.
#v= 0 Refers to a set of indicators selected and vetted by the Chief Economist Office -Sustainable Development (work lead by Jason Daniel Russ)
# v=1 refers to a set of indicators selected by the MENA - Sustainable Development team focusing on Egypt results
#Each version would show a different set of indicators
version <- 1 #  1 or 0
### COUNTRY Percentile DATASET ###
###         World              ###
#Load raw and percentile value data generated before
country_all <- read.csv(paste0(dir_int,"World_SD_values_V5_index.csv"))
#Arrange values
country_all$pop_dis<-as.numeric(as.character(country_all$pop_dis))
country_all$pop_dis<-format(round(country_all$pop_dis, 2), nsmall = 2)
#Assign names to variables
#Resilience
colnames(country_all)<-str_replace(colnames(country_all), "food_sec", "Food Security Index")
colnames(country_all)<-str_replace(colnames(country_all), "risk_wellbeing", "*Risk to wellbeing %")
colnames(country_all)<-str_replace(colnames(country_all), "risk_to_assets", "*Risk to asset %")
colnames(country_all)<-str_replace(colnames(country_all), "pop_dis", "*Pop. affected by disasters %")
colnames(country_all)<-str_replace(colnames(country_all), "EN.POP.SLUM.UR.ZS", "*Urban slum population %")
colnames(country_all)<-str_replace(colnames(country_all), "rain_exp", "*Rainfall shock exposure %")
#Inclusion
colnames(country_all)<-str_replace(colnames(country_all), "pov_1016", "*Extreme poverty headcount %")
colnames(country_all)<-str_replace(colnames(country_all), "SL.TLF.CACT.FE.ZS", "Female labor part.%")
colnames(country_all)<-str_replace(colnames(country_all), "SH.STA.SMSS.ZS", "Safely managed sanitation %")
colnames(country_all)<-str_replace(colnames(country_all), "SH.H2O.SMDW.ZS", "Safely managed drinking water %")
colnames(country_all)<-str_replace(colnames(country_all), "HD.HCI.OVRL", "Human Capital index")
colnames(country_all)<-str_replace(colnames(country_all), "SI.POV.GINI", "*Gini index")
colnames(country_all)<-str_replace(colnames(country_all), "SE.SEC.ENRR", "Secondary school enrollment %")
colnames(country_all)<-str_replace(colnames(country_all), "SH.IMM.IDPT", "Immunization DPT %")
colnames(country_all)<-str_replace(colnames(country_all), "account.t.d.7", "Account ownership, poorest 40%")
colnames(country_all)<-str_replace(colnames(country_all), "LGBT_acc", "LGBT acceptance index")
colnames(country_all)<-str_replace(colnames(country_all), "wbl", "Women, Business & Law index")
colnames(country_all)<-str_replace(colnames(country_all), "trust_ppl", "Most ppl. can be trusted %")
colnames(country_all)<-str_replace(colnames(country_all), "ref_idp", "*Refugees & IDPs index")
colnames(country_all)<-str_replace(colnames(country_all), "sec_aparat", "*Security apparatus index")
colnames(country_all)<-str_replace(colnames(country_all), "conf_gov", "Confidence in the government")
#Sustainability
colnames(country_all)<-str_replace(colnames(country_all), "NY.ADJ.SVNG.GN.ZS", "Adjusted net savings %")
colnames(country_all)<-str_replace(colnames(country_all), "EN.ATM.PM25.MC.M3", "*PM2.5 mean annual exposure mg/m3")
colnames(country_all)<-str_replace(colnames(country_all), "EG.FEC.RNEW.ZS", "Renewal energy consumption %")
colnames(country_all)<-str_replace(colnames(country_all), "ER.H2O.INTR.PC", "Renewal internal freshwater(pc)")
colnames(country_all)<-str_replace(colnames(country_all), "wat_qua", "Water Quality SDG 6.3")
colnames(country_all)<-str_replace(colnames(country_all), "WWT.new", "Wastewater treated %")
colnames(country_all)<-str_replace(colnames(country_all), "waste_managed", "Waste properly managed %")
colnames(country_all)<-str_replace(colnames(country_all), "waste_rate", "*Municipal soild waste (kg/pc/day)")
colnames(country_all)<-str_replace(colnames(country_all), "BHV.new", "Biodiversity & Habitat index")
colnames(country_all)<-str_replace(colnames(country_all), "FSH.new", "Fisheries index")
colnames(country_all)<-str_replace(colnames(country_all), "GIB.new", "GHG intensity growth rate")
colnames(country_all)<-str_replace(colnames(country_all), "EN.ATM.CO2E.PC", "*CO2 emissions (mtr/ton pc)")
colnames(country_all)<-str_replace(colnames(country_all), "forest_loss", "*Forest loss %")
#colnames(country_all)<-str_replace(colnames(country_all), "DT.TDS.DECT.GN.ZS", "Total debt service")
#Inclusion
colnames(country_all)<-str_replace(colnames(country_all), "agri_land", "Agri. land productivity $/ha")
colnames(country_all)<-str_replace(colnames(country_all), "agri_value", "Agri. value added per worker $")
colnames(country_all)<-str_replace(colnames(country_all), "gini_ghg", "Total GNI/GHG emission")
colnames(country_all)<-str_replace(colnames(country_all), "gov_effect", "Governance effectiveness")
colnames(country_all)<-str_replace(colnames(country_all), "cont_corr", "Control of corruption")
#colnames(country_all)<-str_replace(colnames(country_all), "reg_qua", "Regulatory quality")
colnames(country_all)<-str_replace(colnames(country_all), "lpi_score", "Logistic performance index")
colnames(country_all)<-str_replace(colnames(country_all), "sdg9_intuse", "Pop. using internet %")
colnames(country_all)<-str_replace(colnames(country_all), "lpi_score", "Logistic performance index")
colnames(country_all)<-str_replace(colnames(country_all), "Tenure.insecurity", "*Tenure insecurity %")
colnames(country_all)<-str_replace(colnames(country_all), "water_efficiency_FAO", "Water use efficiency (USD/m3)")
colnames(country_all)<-str_replace(colnames(country_all), "water_efficiency_ceo", "Water use efficiency (GNI/m3)")
options(scipen=999) #remove scientific notation
#Short income group name for graphs
country_all$income_red <- ifelse(country_all$income == "High income", "HIC",
ifelse(country_all$income ==  "Upper middle income", 'UMIC',
ifelse(country_all$income ==  "Lower middle income", 'LMIC',
ifelse(country_all$income ==  "Low income", 'LIC', 'Other'))))
#Aspirational income group: income group "one level up"
country_all$income_aspiration <- ifelse(country_all$income_red == "HIC", "HIC",
ifelse(country_all$income_red == 'UMIC', "HIC",
ifelse(country_all$income_red == 'LMIC', 'UMIC',
ifelse(country_all$income_red == 'LIC', 'LMIC', 'Other'))))
#Short regional group for graphs
country_all$region_red <- ifelse(country_all$region == "South Asia", "SSA",
ifelse(country_all$region ==  "Europe & Central Asia", 'ECA',
ifelse(country_all$region ==  "Middle East & North Africa", 'MENA',
ifelse(country_all$region ==  "Sub-Saharan Africa", 'SSA',
ifelse(country_all$region ==  "Latin America & Caribbean", 'LAC',
ifelse(country_all$region ==  "East Asia & Pacific", 'EAP',
ifelse(country_all$region ==  "North America", 'NAC', 'Other')))))))
#Make people affected by disaster numeric
country_all$`*Pop. affected by disasters %`<-as.numeric(as.character(country_all$`*Pop. affected by disasters %`))
# MEDIAN
income_median <- country_all%>%  group_by(income_red)%>%
select(-matches('_per'))%>% dplyr::summarise(across(where(is.numeric), list(median= ~median(., na.rm = T)), .names = "{col}"))
income_median<- reshape2::melt(income_median, id.vars=c("income_red"), variable.name="indicator", value.name="median")
#MEAN
income_mean <- country_all%>%group_by(income_red)%>%
select(-matches('_per'))%>% dplyr::summarise(across(where(is.numeric), list(mean= ~mean(., na.rm = T)), .names = "{col}"))
income_mean<- reshape2::melt(income_mean, id.vars=c("income_red"), variable.name="indicator", value.name="mean")
#SD
income_sd <- country_all%>% group_by(income_red)%>%
select(-matches('_per'))%>% dplyr::summarise(across(where(is.numeric), list(sd= ~sd(., na.rm = T)), .names = "{col}"))
income_sd<- reshape2::melt(income_sd, id.vars=c("income_red"), variable.name="indicator", value.name="sd")
#Merge MEAN, MEDIAN, SD
income_info <- merge(income_mean, income_median) %>%  merge(income_sd)
#Get ranges for SD  (Mean) - Later use to estimate if the countries value is one standar deviation above or below, or within one SD of the Mean
income_info$sd_mean_up<-income_info$mean + income_info$sd
income_info$sd_mean_down<-income_info$mean - income_info$sd
##Get ranges for SD  (Median) -Later use to estimate if the countries value is one standar deviation above or below, or within one SD of the Median
income_info$sd_median_up<-income_info$median + income_info$sd
income_info$sd_median_down<-income_info$median - income_info$sd
#Duplicate a version of country_all for transformation- country_all needs to remain the same to be use in the percentil rank graph
country_all2<-country_all
#Select ranking values
country_all2<-country_all2%>% select(country, iso3, income_red, region_red, Resilience_v0, Resilience_v1, Inclusion_v0, Inclusion_v1, Sustainability_v0, Sustainability_v1, Efficiency_v0, Efficiency_v1)
#Tranform to long format for graph
country_long_complete <- reshape2::melt(country_all2,
# ID variables - all the variables to keep but not split apart on
id.vars=c("country", "iso3","income_red", "region_red"),
variable.name="pilar",
value.name="percentil"
)
#Get the median value for income group & transform to long format - this would be use for the graph bars
median_income<- country_all2 %>%
group_by(income_red)%>%
dplyr::summarise(across(where(is.numeric), function(x){ median(x, na.rm=TRUE)}))
median_income_long <- reshape2::melt(median_income,
# ID variables - all the variables to keep but not split apart on
id.vars=c("income_red"),
variable.name="pilar",
value.name="median_income")
#Join data
country_long_complete<-left_join(country_long_complete, median_income_long, by=c("pilar", "income_red"))
for(i in country){
#Duplicate  a version of country long for subsetting
country_long<-country_long_complete
if (version == 0){
country_long<-country_long%>% filter(str_detect(pilar, "v0"))
median_income_filter<-median_income_long%>% filter(str_detect(pilar, "v0"))
} else {
country_long<-country_long%>% filter(str_detect(pilar, "v1"))
median_income_filter<-median_income_long %>% filter(str_detect(pilar, "v1"))
}
#Get varible to identify the country in the graph
country_long<-country_long%>%
mutate(country_ind = ifelse(iso3 == i , 1, 0))
##Get regional group
regional_group_df<-country_long%>%
filter(iso3 == i)%>%
select(region_red)
regional_group<-regional_group_df[1,1]
#Filter country and arrange percentiles values for graph (since it is a facet graph, percentil arrange gets messy)
#Establish regional group beforehand
country_long<-country_long%>%
dplyr::filter(region_red==regional_group)%>%
dplyr::filter(!is.na(percentil))%>%
ungroup() %>%
arrange(pilar, (desc(percentil)))%>%
mutate(r = row_number())%>%
mutate(pilar_name = str_replace(pilar, "_v0|_v1", ""))
country_long$pilar_name_f<- factor(country_long$pilar_name, levels= c("Resilience", "Inclusion", "Sustainability", "Efficiency"))
#Once filtered by region, get regional median graph and for the next graph
country_long<-country_long%>%
group_by(pilar)%>%
mutate(median_regional= median(percentil, na.rm=T))
# prepare regional median for next graph
regional_median<-country_long%>%
group_by(pilar)%>%
dplyr::summarise(percentil_median= median(percentil, na.rm=T))%>%
mutate(group = regional_group)%>%
select(group, everything())
#Median_income database
country_long_median<-country_long%>%
filter(iso3 == i)
#Graph regional comparison percentil ranking
reg<-  ggplot(country_long, aes(x = r, y = percentil*100, fill = pilar_name_f, color = as.factor(country_ind), group=income_red)) +
geom_col(size=1.2, alpha=0.7)+
#Blue line REGIONAL MEDIAN -ADD LINE LEGENDS IN PPT
geom_hline(aes(yintercept = median_regional*100), color="turquoise3", size=1.5)+
#Grey line INCOME MEDIAN- ADD LINE LEGENDS IN PPT
geom_hline(data=country_long_median, aes(yintercept = median_income*100), color="grey", size=1.5)+
facet_grid(~pilar_name_f, scales = "free")+
#scale_y_continuous(labels = value, breks= value)+
labs(y = "Percentile rank in the world",
title = "")+
theme_minimal()+
theme(strip.text.x = element_text(size = 19, face = "bold"),
axis.text.y = element_text(size = 14, hjust = .5, vjust = .5),
plot.title=element_text(size=14, face = "bold"),
axis.title.x=element_blank(),
axis.text.x = element_text(angle = 90, hjust = 1, size= 14),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
scale_fill_manual(values = c("darkcyan", "red2" ,"darkorange", "darkmagenta"))+
scale_color_manual(values=c("grey25","greenyellow"))+
scale_x_continuous(breaks = country_long$r, labels = country_long$country) +
geom_text(aes(x=r, y=(percentil*100)+3 , label= as.integer(percentil*100)), color="black",alpha=1, size=6, inherit.aes = FALSE )
if (version == 0){
ggsave(reg, file=paste0(dir_out, group,'/',i,"_barplot_per_v0.png"), width=25, height=10)
} else {
ggsave(reg, file=paste0(dir_out, group,'/',i,"_barplot_per_v1.png"), width=25, height=10)
}
#Rename col, add iso3 and merge bases
colnames(median_income_filter)<-c("group", "pilar", "percentil_median")
median_income_filter$iso3<-"AAAA" # name like this to make sure it mantains graph color order
regional_median$iso3<-"AAAA" # name like this to make sure it mantains graph color order
country_median_filter<-country_long_median%>%
dplyr::select(country, pilar, percentil, iso3)
colnames(country_median_filter)<-c("group",  "pilar", "percentil_median", "iso3")
#Merge regional median/income median/country median
graph_bar2<-rbind(country_median_filter, median_income_filter, regional_median)
#Prepare for graph
graph_bar2<-graph_bar2%>%
dplyr::filter(!is.na(percentil_median))%>%
ungroup() %>%
arrange(pilar, (desc(percentil_median)))%>%
mutate(r = row_number())%>%
mutate(pilar_name = str_replace(pilar, "_v0|_v1", ""))
graph_bar2$pilar_name_f<- factor(graph_bar2$pilar_name, levels= c("Resilience", "Inclusion", "Sustainability", "Efficiency"))
graph2  <-  ggplot(graph_bar2, aes(x = r, y = percentil_median*100, fill = pilar_name_f, color = as.factor(iso3))) +
geom_col(size=1.2, alpha=0.7)+
#Red line (m)
geom_hline( yintercept = 50 , color="red3", size=1)+
facet_grid(~pilar_name_f, scales = "free")+
#scale_y_continuous(labels = value, breks= value)+
labs(y = "Median percentile rank",
title = "")+
theme_minimal()+
theme(strip.text.x = element_text(size = 19, face = "bold"),
axis.text.y = element_text(size = 16, hjust = .5, vjust = .5),
plot.title=element_text(size=14, face = "bold"),
axis.title.x=element_blank(),
axis.text.x = element_text(size= 14),
legend.position = "none",
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())+
scale_fill_manual(values = c("darkcyan", "red2" ,"darkorange", "darkmagenta"))+
scale_color_manual(values=c("grey25", "green3"))+
scale_x_continuous(breaks = graph_bar2$r, labels = str_wrap(graph_bar2$group, width = 7)) +
geom_text(aes(x=r, y=(percentil_median*100)+3 , label= as.integer(percentil_median*100)), color="black",alpha=1, size=6, inherit.aes = FALSE )
if (version == 0){
ggsave(graph2, file=paste0(dir_out, group,'/',i,"_barplot_per_group_v0.png"), width=25, height=10)
} else {
ggsave(graph2, file=paste0(dir_out, group,'/',i,"_barplot_per_group_v1.png"), width=25, height=10)
}
}
### COUNTRY Percentile DATASET ###
for(i in country){
country_tot<-country_all
country_tot<- country_tot[country_tot$iso3 == i, ]
country_percent<-country_tot %>% select(matches('_per'))
country_percent <- as.data.frame(t(as.matrix(country_percent)))
country_percent <- country_percent %>% rownames_to_column("indicator")
colnames(country_percent)<-c("indicator", "percentil")
country_percent$indicator<-str_replace(country_percent$indicator, "_per", "")
#### Country Data Raw values ####
country_values<-country_tot %>% select(-matches('_per'))
country_values <- as.data.frame(t(as.matrix(country_values)))
country_values <- country_values %>% rownames_to_column("indicator")
colnames(country_values)<-c("indicator", "raw_value")
#Set indicators categories
efficiency<-c("Agri. land productivity $/ha", "Agri. value added per worker $", "Total GNI/GHG emission","Governance effectiveness", "Control of corruption", "Logistic performance index", "Pop. using internet %", "Water use efficiency (USD/m3)", "Logistic performance index", "*Tenure insecurity %", "Water use efficiency (USD/m3)", "Water use efficiency (GNI/m3)")
sustainability<-c("Adjusted net savings %", "*PM2.5 mean annual exposure mg/m3", "Renewal energy consumption %", "Renewal internal freshwater(pc)", "Water Quality SDG 6.3", "Wastewater treated %", "Waste properly managed %", "*Municipal soild waste (kg/pc/day)", "Biodiversity & Habitat index", "Fisheries index", "GHG intensity growth rate", "*CO2 emissions (mtr/ton pc)", "*Forest loss %")
inclusion<-c("*Extreme poverty headcount %", "*Gini index", "Immunization DPT %", "Safely managed sanitation %", "Safely managed drinking water %", "Immunization DPT %",  "Secondary school enrollment %", "Human Capital index", 'Account ownership, poorest 40%', "Female labor part.%", "Women, Business & Law index",  "LGBT acceptance index",  "Most ppl. can be trusted %", "*Refugees & IDPs index", "*Security apparatus index", "Confidence in the government" )
resilience<-c("Food Security Index", "*Risk to wellbeing %", "*Risk to asset %","*Pop. affected by disasters %", "*Rainfall shock exposure %", "*Urban slum population %")
#Assign categories (number set to appear in the RISE order in the graph)
country_percent$category <- ifelse(country_percent$indicator %in% efficiency, '2.Efficiency',
ifelse(country_percent$indicator %in% sustainability, '3.Sustainability',
ifelse(country_percent$indicator %in% resilience, '4.Resilience',
ifelse(country_percent$indicator %in% inclusion, '1.Inclusion', 'Other'))))
country_percent <- country_percent%>% filter(category!='Other')
#Join percentage and raw value
country_percent <-left_join(country_percent, country_values, by="indicator")
country_percent$raw_value<-as.numeric(as.character(country_percent$raw_value))
country_percent$raw_value<-format(round(country_percent$raw_value, 2), nsmall = 2)
# Format score data for graphs
#country_percent <- country_percent[,c(3,1,2,4)]
country_percent$percentil <- as.numeric(as.character(country_percent$percentil))
country_percent$percentil<-country_percent$percentil*100
country_percent <- country_percent[order(country_percent$category),]
#create first databases for percentil ranking (global)
country_percent$percentil<-as.integer(country_percent$percentil)
country_percent<-country_percent%>% select(indicator, percentil, raw_value, category)
write.csv(country_percent,paste0(dir_out, group,'/',i,"_percentil.csv"), row.names = FALSE)
### COUNTRY SCORE DATASET ###
country_score <- read.csv(paste0(dir_int, comparison_score,".csv"))
#Assign names to variables
#Resilience
colnames(country_score)<-str_replace(colnames(country_score), "food_sec", "Food Security Index")
colnames(country_score)<-str_replace(colnames(country_score), "risk_wellbeing", "*Risk to wellbeing %")
colnames(country_score)<-str_replace(colnames(country_score), "risk_to_assets", "*Risk to asset %")
colnames(country_score)<-str_replace(colnames(country_score), "pop_dis", "*Pop. affected by disasters %")
colnames(country_score)<-str_replace(colnames(country_score), "EN.POP.SLUM.UR.ZS", "*Urban slum population %")
colnames(country_score)<-str_replace(colnames(country_score), "rain_exp", "*Rainfall shock exposure %")
#Inclusion
colnames(country_score)<-str_replace(colnames(country_score), "pov_1016", "*Extreme poverty headcount %")
colnames(country_score)<-str_replace(colnames(country_score), "SL.TLF.CACT.FE.ZS", "Female labor part.%")
colnames(country_score)<-str_replace(colnames(country_score), "SH.STA.SMSS.ZS", "Safely managed sanitation %")
colnames(country_score)<-str_replace(colnames(country_score), "SH.H2O.SMDW.ZS", "Safely managed drinking water %")
colnames(country_score)<-str_replace(colnames(country_score), "HD.HCI.OVRL", "Human Capital index")
colnames(country_score)<-str_replace(colnames(country_score), "SI.POV.GINI", "*Gini index")
colnames(country_score)<-str_replace(colnames(country_score), "SE.SEC.ENRR", "Secondary school enrollment %")
colnames(country_score)<-str_replace(colnames(country_score), "SH.IMM.IDPT", "Immunization DPT %")
colnames(country_score)<-str_replace(colnames(country_score), "account.t.d.7", "Account ownership, poorest 40%")
colnames(country_score)<-str_replace(colnames(country_score), "LGBT_acc", "LGBT acceptance index")
colnames(country_score)<-str_replace(colnames(country_score), "wbl", "Women, Business & Law index")
colnames(country_score)<-str_replace(colnames(country_score), "trust_ppl", "Most ppl. can be trusted %")
colnames(country_score)<-str_replace(colnames(country_score), "ref_idp", "*Refugees & IDPs index")
colnames(country_score)<-str_replace(colnames(country_score), "sec_aparat", "*Security apparatus index")
colnames(country_score)<-str_replace(colnames(country_score), "conf_gov", "Confidence in the government")
#Sustainability
#colnames(country_score)<-str_replace(colnames(country_score), "DT.TDS.DECT.GN.ZS", "Total debt service")
colnames(country_score)<-str_replace(colnames(country_score), "NY.ADJ.SVNG.GN.ZS", "Adjusted net savings %")
colnames(country_score)<-str_replace(colnames(country_score), "EN.ATM.PM25.MC.M3", "*PM2.5 mean annual exposure mg/m3")
colnames(country_score)<-str_replace(colnames(country_score), "forest_loss", "*Forest loss %")
colnames(country_score)<-str_replace(colnames(country_score), "EG.FEC.RNEW.ZS", "Renewal energy consumption %")
colnames(country_score)<-str_replace(colnames(country_score), "ER.H2O.INTR.PC", "Renewal internal freshwater(pc)")
colnames(country_score)<-str_replace(colnames(country_score), "wat_qua", "Water Quality SDG 6.3")
colnames(country_score)<-str_replace(colnames(country_score), "WWT.new", "Wastewater treated %")
colnames(country_score)<-str_replace(colnames(country_score), "waste_managed", "Waste properly managed %")
colnames(country_score)<-str_replace(colnames(country_score), "waste_rate", "*Municipal soild waste (kg/pc/day)")
colnames(country_score)<-str_replace(colnames(country_score), "BHV.new", "Biodiversity & Habitat index")
colnames(country_score)<-str_replace(colnames(country_score), "FSH.new", "Fisheries index")
colnames(country_score)<-str_replace(colnames(country_score), "GIB.new", "GHG intensity growth rate")
colnames(country_score)<-str_replace(colnames(country_score), "EN.ATM.CO2E.PC", "*CO2 emissions (mtr/ton pc)")
colnames(country_score)<-str_replace(colnames(country_score), "water_efficiency_FAO", "Water use efficiency (USD/m3)")
colnames(country_score)<-str_replace(colnames(country_score), "water_efficiency_ceo", "Water use efficiency (GNI/m3)")
#Efficiency
colnames(country_score)<-str_replace(colnames(country_score), "agri_land", "Agri. land productivity $/ha")
colnames(country_score)<-str_replace(colnames(country_score), "agri_value", "Agri. value added per worker $")
colnames(country_score)<-str_replace(colnames(country_score), "gini_ghg", "Total GNI/GHG emission")
colnames(country_score)<-str_replace(colnames(country_score), "gov_effect", "Governance effectiveness")
colnames(country_score)<-str_replace(colnames(country_score), "cont_corr", "Control of corruption")
#colnames(country_score)<-str_replace(colnames(country_score), "reg_qua", "Regulatory quality")
colnames(country_score)<-str_replace(colnames(country_score), "lpi_score", "Logistic performance index")
colnames(country_score)<-str_replace(colnames(country_score), "sdg9_intuse", "Pop. using internet %")
colnames(country_score)<-str_replace(colnames(country_score), "lpi_score", "Logistic performance index")
colnames(country_score)<-str_replace(colnames(country_score), "Tenure.insecurity", "*Tenure insecurity %")
country_score <- country_score[country_score$iso3 == i, ]
country_score <- as.data.frame(t(as.matrix(country_score)))
country_score <- country_score %>% rownames_to_column("indicator")
colnames(country_score)<-c("indicator", "score")
country_score$category <- ifelse(country_score$indicator %in% efficiency, '2.Efficiency',
ifelse(country_score$indicator %in% sustainability, '3.Sustainability',
ifelse(country_score$indicator %in% resilience, '4.Resilience',
ifelse(country_score$indicator %in% inclusion, '1.Inclusion', 'Other'))))
country_score <- country_score%>% filter(category!='Other')
#Join percentage and raw value
country_score <-left_join(country_score, country_values, by="indicator")
country_score$raw_value<-as.numeric(as.character(country_score$raw_value))
country_score$raw_value<-format(round(country_score$raw_value, 2), nsmall = 2)
# Format score data for graphs
country_score$score <- as.numeric(as.character(country_score$score))
country_score$score<-country_score$score*100
country_score <- country_score[order(country_score$category),]
#Create the second database for graph pillars (regional/income)
#Get inversed values for score graph - For the individual pillars graphs we need to get the value of the indicator and the inverse value, to create the circular graph as an stacked plot #in the score_graph_data, score will be the inverse value and
country_score$score <- with(country_score, (100-score))
country_score$values <- with(country_score, (100-score))
country_score$score <- as.integer(country_score$score)
country_score$values <- as.integer(country_score$values)
write.csv(country_score, paste0(dir_out, group,'/',i,"_score_graphs.csv"), row.names = FALSE)
}
for(i in country){
#Get country income group
income_country<-country_all%>% filter(iso3==i)%>% summarise((income_red))
income_country<-income_country[1,1]
#Get country aspiratinal group
income_aspi<-country_all%>% filter(iso3==i)%>% summarise((income_aspiration))
income_aspi<-income_aspi[1,1]
#Use raw data to compare
country_val<- read.csv(file=paste0(dir_out, group,'/',i,"_percentil.csv"), header=TRUE, sep=",")%>%
select(-percentil)
#country_aspi
income_info_country<-income_info%>%
filter(income_red == income_country | income_red == income_aspi)
income_info_country<-left_join(income_info_country, country_val, by="indicator")
income_info_country<-income_info_country%>%
filter(!is.na(category))%>%
arrange(income_red, category)
income_info_country$raw_value<-as.numeric(as.character(income_info_country$raw_value))
income_info_country<-income_info_country %>%
mutate_if(is.numeric, round, digits=1)
#Create categorical category to use the conditional formating in excel:
# 3 indicator above one standard deviation from the mean
# 2 indicator within one standard deviation from the mean
# 1 indicator below one standad
# This function also revert the values for indicators in which a higher number means worse performing)
#For MEAN
income_info_country<-income_info_country%>%
mutate(mean_flag = ifelse(str_detect(indicator, "\\*") & raw_value > sd_mean_up , "1",
ifelse(raw_value > sd_mean_up, "3",
ifelse(raw_value <= sd_mean_up & raw_value >= sd_mean_down, "2",
ifelse(str_detect(indicator, "\\*") & raw_value < sd_mean_down, "3",
ifelse(raw_value < sd_mean_down, "1", "Error"))))))
#For MEDIAN
income_info_country<-income_info_country%>%
mutate(median_flag = ifelse(str_detect(indicator, "\\*") & raw_value > sd_median_up , "1",
ifelse(raw_value > sd_median_up, "3",
ifelse(raw_value <= sd_median_up & raw_value >= sd_median_down, "2",
ifelse(str_detect(indicator, "\\*") & raw_value < sd_median_down, "3",
ifelse(raw_value < sd_median_down, "1", "Error"))))))
#Arrange to easily modify in excel
income_info_country<-income_info_country%>%
dplyr::select("category", "income_red", "indicator", "raw_value", "median_flag",  "median", "mean_flag", "mean", "sd", "sd_mean_up", "sd_mean_down", "sd_median_up", "sd_median_down")
write.csv(income_info_country,paste0(dir_out, group,'/',i,"_tables_data.csv"), row.names = FALSE)
}
lmics
income_info_country
View(income_info_country)
write.csv(income_info_country,"PSE_tables_data.csv", row.names = FALSE)
